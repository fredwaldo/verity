/*
package com.ysthakur.parsing.parser

import scala.util.parsing.combinator.RegexParsers

class NewLexer extends RegexParsers {
  def lparen = """(""" ^^ (_ => LPAREN)
  def rcurly = """}""" ^^ (_ => RCURLY)
  def pipeline = """|>""" ^^ (_ => PIPELINE)
  def gteq = """>=""" ^^ (_ => GTEQ)
  def rparen = """)""" ^^ (_ => RPAREN)
  def comma = """,""" ^^ (_ => COMMA)
  def colon = """:""" ^^ (_ => COLON)
  def lteq = """<=""" ^^ (_ => LTEQ)
  def lsquare = """[""" ^^ (_ => LSQUARE)
  def dot = """.""" ^^ (_ => DOT)
  def semicolon = """;""" ^^ (_ => SEMICOLON)
  def gt = """>""" ^^ (_ => GT)
  def rt_arrow = """->""" ^^ (_ => RT_ARROW)
  def colonx2 = """::""" ^^ (_ => COLONX2)
  def lcurly = """{""" ^^ (_ => LCURLY)
  def eqx3 = """===""" ^^ (_ => EQX3)
  def or = """|""" ^^ (_ => OR)
  def at = """@""" ^^ (_ => AT)
  def caret = """^""" ^^ (_ => CARET)
  def eq = """=""" ^^ (_ => EQ)
  def plus = """+""" ^^ (_ => PLUS)
  def plusx2 = """++""" ^^ (_ => PLUSX2)
  def andx2 = """&&""" ^^ (_ => ANDX2)
  def fwdslash = """/""" ^^ (_ => FWDSLASH)
  def lt = """<""" ^^ (_ => LT)
  def star = """*""" ^^ (_ => STAR)
  def backslash = """\""" ^^ (_ => BACKSLASH)
  def orx2 = """||""" ^^ (_ => ORX2)
  def tilde = """~""" ^^ (_ => TILDE)
  def rsquare = """]""" ^^ (_ => RSQUARE)
  def question = """?""" ^^ (_ => QUESTION)
  def eqx2 = """==""" ^^ (_ => EQX2)
  def minus = """-""" ^^ (_ => MINUS)
  def excl_mark = """!""" ^^ (_ => EXCL_MARK)
  def and = """&""" ^^ (_ => AND)
  def modulo = """%""" ^^ (_ => MODULO)
  def minusx2 = """--""" ^^ (_ => MINUSX2)
  def noteq = """!=""" ^^ (_ => NOTEQ)
}*/
