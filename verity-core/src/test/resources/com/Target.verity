package com;

import java.lang.*;

public class Target {
  def foo(): void {

  }
  public static def main(args: Array[String]): void {
    val foo: Person = PersonBuilder.build(new BuildFoo());
    return;
  }
}

class Person {
  val name: String;
  val age: int;

  public constructor(n: String, a: int) {
    name = n;
    age = a;
  }
}

class SetName {}
class SetAge {}

class PersonBuilder {
  private var name: String;
  private var age: int;
  
  private constructor(){}

  public static def build(bp: BuildPerson): Person {
    val b: PersonBuilder = new PersonBuilder();
    bp.buildPerson(b);
    return new Person(b.name, b.age);
  }

  public def setName(n: String)(proof ev: verity.lang.NotProven[SetName]): void proof SetName {
    name = n;
    proof val ev: SetName = null;
    return;
  }

  public def setAge(a: int)(proof ev: verity.lang.NotProven[SetAge]): void proof SetAge {
    age = a;
    proof val ev: SetAge = null;
    return;
  }
}


abstract class BuildPerson {
  abstract def buildPerson(p: PersonBuilder): void proof SetName, SetAge;
}

class BuildFoo extends BuildPerson {
  def buildPerson(p: PersonBuilder): void proof SetName, SetAge {
    p.setName("Foo");
    p.setAge(0);
    return;
  }
}

